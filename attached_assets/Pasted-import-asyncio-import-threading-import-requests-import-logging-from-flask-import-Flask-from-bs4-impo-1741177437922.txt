import asyncio
import threading
import requests
import logging
from flask import Flask
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import nest_asyncio

# Flask server setup
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API Keys
TMDB_API_KEY = "YOUR_TMDB_API_KEY"  # Get from https://www.themoviedb.org/settings/api
BOT_TOKEN = "YOUR_BOT_TOKEN"  # Get from BotFather

# Function to search for movies on TMDb
async def search_movies(movie_name):
    try:
        url = f"https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={movie_name}"
        response = requests.get(url).json()
        
        movies = []
        if response.get("results"):
            for movie in response["results"][:5]:  # Get top 5 results
                title = movie["title"]
                year = movie.get("release_date", "Unknown").split("-")[0]
                movie_id = movie.get("id")
                movies.append({"id": movie_id, "title": title, "year": year})
        return movies
    except Exception as e:
        logger.error(f"Error searching movies: {e}")
        return []

# Function to handle /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üé¨ Welcome! Send me a movie name, and I'll find details for you.")

# Function to handle user messages (movie search)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        movie_name = update.message.text
        movies = await search_movies(movie_name)
        
        if movies:
            keyboard = [[InlineKeyboardButton(f"{movie['title']} ({movie['year']})", callback_data=f"movie_{movie['id']}")] for movie in movies]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("üé¨ Select a movie:", reply_markup=reply_markup)
        else:
            await update.message.reply_text("‚ùå No movies found.")
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        await update.message.reply_text("‚ùå An error occurred. Please try again later.")

# Main function to run the bot
async def run_bot():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("Bot is running...")
    await app.run_polling()

# Function to keep the bot running in a separate thread
def start_bot():
    nest_asyncio.apply()
    asyncio.run(run_bot())

# Start the bot in a separate thread
threading.Thread(target=start_bot, daemon=True).start()

# Run Flask server
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)
